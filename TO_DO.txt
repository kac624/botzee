1. Finish model-compatible game loop and convert to function

2. add potential scores AFTER EACH ROLL
3. add probabilities after each roll

4. Replace _ in `out1, _ = self.lstm1(x[:, masks[0]])` to capture state of LSTM



OLD

def pick_dice(hand, decision_function):
    dice_picks = []
    keepers = []
    
    for idx, die in enumerate(hand):
        choice = decision_function(idx, die, hand, keepers)
        dice_picks.append(choice)
        if choice == 1:
            keepers.append(die)
    
    return dice_picks, keepers


def pick_random_dice(idx, die, hand, keepers):
    return np.random.choice([0,1])

def pick_frequent_dice(idx, die, hand, keepers):
    rest_of_hand = np.delete(hand, idx)
    if die in rest_of_hand or die in keepers:
        choice = 1
    else:
        choice = 0
    return choice   